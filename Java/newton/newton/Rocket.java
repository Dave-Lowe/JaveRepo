/* 
	Newton.java

	Author:			Dave Lowe
	Description:	Rocket Object. Models a simple Rocket with Left and Right
					Thrusters and a main engine.  This Object Could be modified to 
					Model anything from a lunar lander to a chunk of debri.
*/

package newton;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

public class Rocket extends Applet
{

	/*  x & y are the coordinates of the rocket at any time

	deltax and deltay are the horezontal and vertical components of the Rocket's velocity */

	private double x,y;
	private double deltax,deltay;
	
	/* Angle is the rocket's angle, and deltaand is it's angular velocity  */
	
	private double angle, deltaang;
	
	/*  Rocketshape x & y hold the relative coordinates of it's four corners to it's own axis  
	    flame shape x and y hold the relative positions of the flames, the first three are the corners of the 
	    main engine flare, the last four define the positions of the four manouvering thrusters  */
	
	private int rocketshapex[] 	= new int[4];
	private int rocketshapey[] 	= new int[4];
	
	private int flameshapex[]	= new int[7];
	private int flameshapey[] 	= new int[7];
	
	
	/*  rocketact x and y hold actual coordinates of the rockets corners after they have been rotated and shifted
	 	to the correct possition on the screen. These are the coordinates that are used to actually draw the Rocket.
	 	Similarly flameact x and y hold the actual positions of the flames */
	
	private int rocketactx[]    = new int[4];
	private int rocketacty[]	= new int[4];
	
	private int flameactx[]		= new int[7];
	private int flameacty[]		= new int[7];
	
	
	/* enginePower and thrusterPower hold the power of the main engines and the lateral thrusters  */
	
	private double enginePower, thrusterPower;
	
	
	/* Mass hold the mass of the Rocket  */
	
	
	private double mass;
	
	
	/* thrust and anglethrust are constants which the accelaration generated by the engines */
	
	private double thrust, anglethrust;
	
	
		
	/* horizontal and vertical component of planets gravity */
		
	private double gravx, gravy;
		
		
	/* Colour of Rocket */
		
	private Color RocketColor = new Color(255,0,0);
	
	/* Colour of flames */
	
	private Color yellow = new Color(255,255,0);
	
	
		
	
	boolean isStandalone = false;

	public Rocket(double initx, double inity, double initangle, double initmass, double initepower, double inittpower, Color c) 
	{
	
		/* Set up relative coordinates for Rocket   */
		
		rocketshapex[0] = 0;
		rocketshapex[1] = 5;
		rocketshapex[2] = 0;
		rocketshapex[3] = -5;
		
		rocketshapey[0] = 10;
		rocketshapey[1] = -10;
		rocketshapey[2] = -5;
		rocketshapey[3] = -10;
		
		
		/* Set up relative coordinates for main engine flare  */
		
		flameshapex[0] 	= 2;
		flameshapex[1] 	= 0;
		flameshapex[2]	= -2;
		
		flameshapey[0]	= -7;
		flameshapey[1]	= -23;
		flameshapey[2]	= -7;
		
		
		/* Set up relative coordinates for the manouvering thrusters  */
		
		flameshapex[3]	= -2;
		flameshapex[4]	= 2;
		flameshapex[5] 	= -7;
		flameshapex[6]	= 7;
		
		flameshapey[3]	= 7;
		flameshapey[4]	= 7;
		flameshapey[5]	= -8;
		flameshapey[6]	= -8;
		
		
			
	
		/* Set up constants  */
		
		enginePower = initepower;
		
		thrusterPower = inittpower;
		
		mass = initmass;
		
		
				
		/*  Set up initial Values */
		
		
		x = initx;
		y = inity;
		
		angle = initangle;
		
		
		deltax = 0;
		deltay = 0;
		
		deltaang = 0;
		
		gravx	 = 0;
		gravy	 = 0;
		
		RocketColor = c;
						
	}
	
	
				
	
	public void UpdatePosition(boolean throttle, boolean left, boolean right)
	{	
		/* determine thrut and angle thrust (could vary if mass changes)  */
		
		thrust = enginePower/mass;
		
		anglethrust = thrusterPower/mass;
		
				
		/* If any buttons pressed adjust angular velocity accordingly */	
			
		if (left)
		{
			deltaang = deltaang - anglethrust;
		}
		if (right)
		{
			deltaang = deltaang + anglethrust;
		}
			
			
		/* Calculate new angle and adjust to bring into a sensible range if necessary */
		
		angle = angle + deltaang;
		
		if (angle > (2*java.lang.Math.PI))
		{
			angle = angle - (2*java.lang.Math.PI);
		}
		
		if (angle < 0)
		{
			angle = angle + (2*java.lang.Math.PI);
		}	
		
		
		
		if (throttle)
		{
			deltax = deltax - (thrust * java.lang.Math.sin(angle));
			deltay = deltay + (thrust * java.lang.Math.cos(angle));
		}	
		
			
		/*Calculate new y position  */
		
		y = y + deltay;
		
		
		/* Calculate new x position  */
		
		x = x + deltax;
		
		
		
		/* calculate actual coordintates for the Rocket  */
		
		CalcRocketCoords();
		
		
		/* calculate the actual coordinates for the flames */
		
		CalcFlameCoords();
		
		
		
	}
	
	
	public void ApplyGravity(double planetx, double planety, double GMm)
	{
		double rsquared, theta, distx, disty, grav;
		
		/*  find the position of the rocket to the planet in polar coordinates */
		
		
		distx = x - planetx;
		disty = y - planety;
		
		/* actually only need r^2 for this function */
		
		rsquared = java.lang.Math.pow(distx,2) + java.lang.Math.pow(disty,2);

		
		theta = java.lang.Math.atan2(disty,distx);
		
		
		/* calculate the horizontal and vertical components of gravity  */
		
			
		grav = GMm/rsquared;
		gravx = grav * java.lang.Math.cos(theta);
		gravy = grav * java.lang.Math.sin(theta);
			
		deltax	= deltax - gravx;
		deltay	= deltay - gravy;

	}		 
			
		
	public double FindRange (double x1, double y1)
	{
		double rsquared, distx, disty;
		
		distx = x - x1;
		disty = y - y1;
		
		rsquared = java.lang.Math.pow(distx,2) + java.lang.Math.pow(disty,2);
		
		return(java.lang.Math.sqrt(rsquared));
	}	


	public double GetXCoord ()
	{
		return(x);
	}
	
	
	public double GetYCoord ()
	{
		return(y);
	}
	
	public double GetDeltaX()
	{
		return(deltax);
	}
	
	
	public double GetDeltaY()
	{
		return(deltay);
	}
	
			
	public double GetAngle ()
	{
		return(angle);
	}


	public double GetMass ()
	{
		return(mass);
	}
		
		
	public Color GetColor()
	{
		return(RocketColor);
	}			
	
	public void SetXCoord(double x1)
	{
		x=x1;
	}
	
	public void SetYCoord(double y1)
	{
		y=y1;
	}
	
	
	public void SetAngle(double a1)
	{
		angle=a1;
	}						
			
	
			
			
	
	public void DrawRocket(Graphics g, boolean throttle, boolean left, boolean right)
	{
		
		
		/* Draw the Rocket  */
		
		g.setColor(RocketColor);
		g.fillPolygon(rocketactx,rocketacty,4);			
		
		
		/* draw the main engine flame if throttle on */
		
		if (throttle)
		{
			g.setColor(yellow);
			g.fillPolygon(flameactx,flameacty,3);	
		}	
		
		
		/* draw thusters 3 and 6 if left button on and reset the flag */
		
		if (left)
		{
			g.setColor(yellow);
			g.fillOval(flameactx[3]-2,flameacty[3]-2,4,4);
			g.fillOval(flameactx[6]-2,flameacty[6]-2,4,4);
			
						
		}
				
		
		/* draw thrusters 4 and 5 if right button on and reset the flag*/
		
		if(right)
		{
			g.setColor(yellow);
			g.fillOval(flameactx[4]-2,flameacty[4]-2,4,4);
			g.fillOval(flameactx[5]-2,flameacty[5]-2,4,4);
			
				
		}
		
		
	}	


private void CalcRocketCoords()
	{
		int n;
		double r, theta;
		
		double localx,localy;
		
		/*  for each value of Rocketshapex and y  */
		
		for (n=0;n<4;n++)
		{
			/* convert Rocktshape x and y to polar coordinates  */
			
			r = java.lang.Math.sqrt(java.lang.Math.pow(rocketshapex[n],2) + 
									java.lang.Math.pow(rocketshapey[n],2));
			theta = java.lang.Math.atan2(rocketshapey[n],rocketshapex[n]);
			
			/* rotate each point around by angle  */
			
			theta = theta + angle;
			
			/* convert back to reactangular coords  */
			
			localx = r * java.lang.Math.cos(theta);
			localy = r * java.lang.Math.sin(theta);
			
			/* add actual x and y coords and store results in Rocketactx and rocketacty  */
			
			localx = localx + x;
			localy = localy + y;
			
			rocketactx[n] = (int)(java.lang.Math.round(localx));
			rocketacty[n] = (int)(java.lang.Math.round(localy));
		}
	}		
			
			
	private void CalcFlameCoords()
	{
		int n;
		double r, theta;
		
		double localx,localy;
		
		/*  for each value of Rocketshapex and y  */
		
		for (n=0;n<7;n++)
		{
			/* convert flameshape x and y to polar coordinates  */
			
			r = java.lang.Math.sqrt(java.lang.Math.pow(flameshapex[n],2) + 
									java.lang.Math.pow(flameshapey[n],2));
			theta = java.lang.Math.atan2(flameshapey[n],flameshapex[n]);
			
			/* add a random 'flicker' to the main engine flare  */
			
			if(n==1)
			{
				r = r + ((8*java.lang.Math.random())-4);
			}	
			
			/* rotate each point around by angle  */
			
			theta = theta + angle;
			
			/* convert back to reactangular coords  */
			
			localx = r * java.lang.Math.cos(theta);
			localy = r * java.lang.Math.sin(theta);
			
			/* add actual x and y coords and store results in flametactx and flametacty  */
			
			localx = localx + x;
			localy = localy + y;
			
			flameactx[n] = (int)(java.lang.Math.round(localx));
			flameacty[n] = (int)(java.lang.Math.round(localy));
		}
	}		
			


	// Retrieve the value of an applet parameter
	public String getParameter(String key, String def) 
	{
		return isStandalone ? System.getProperty(key, def) :
			(getParameter(key) != null ? getParameter(key) : def);
	}

	// Get info on the applet parameters
	public String[][] getParameterInfo() 
	{
		return null;
	}

	// Get applet information
	public String getAppletInfo() 
	{
		return "Applet Information";
	}

	// Initialize the applet
	
	public void initComponents() throws Exception
	{
// BEGIN GENERATED CODE
		// the following code sets the frame's initial state
		setLocation(new java.awt.Point(0, 0));
		setLayout(null);
		setSize(new java.awt.Dimension(800, 600));


// END GENERATED CODE
	}
	


}
